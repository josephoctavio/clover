WELCOME USER TO CLOVER V1
THIS VERSION INCLUDES THE FOLLOWING FEATURES:
- A new and improved user interface
- Enhanced performance and speed
- Bug fixes and stability improvements
- Basic Code snippets for common tasks
- A new component preview page for better visualization
- A new snippets grid layout for easy access to code snippets
- A new publisher name display for better attribution
- A new preview button for quick access to component previews
- A new data-link attribute for easy linking to component previews
- A new data-category attribute for better organization of snippets
- A new snippet content area for displaying code snippets   
- Clover logo text is using luckiest guy font 
- clover brand primry color is purple blue pink blue 

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Create Component | Clover</title>
  <link rel="stylesheet" href="styles/main.css" />
  <link rel="stylesheet" href="styles/create.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css" />
  <style>
    #colorTrigger {
      position: absolute;
      bottom: 10px;
      right: 10px;
      width: 28px;
      height: 28px;
      background: linear-gradient(45deg, red, orange, yellow, green, blue, indigo, violet);
      border-radius: 4px;
      border: 1px solid white;
      box-shadow: 0 1px 4px rgba(0,0,0,0.25);
      cursor: pointer;
      z-index: 10;
    }

    #previewCanvasContainer {
      position: relative;
      background-color: white;
      border: 1px solid #ccc;
      border-radius: 8px;
      overflow: hidden;
    }

    #livePreview {
      width: 100%;
      height: 300px;
      border: none;
    }
  </style>
</head>
<body>

<main id="createContainer">
  <section id="startFormSection">
    <h1>üöÄ Start Building a Component</h1>
    <select id="componentType" required>
      <option value="">Select a component type</option>
      <option value="buttons">Buttons</option>
      <option value="forms">Forms</option>
      <option value="cards">Cards</option>
      <option value="loaders">Loaders</option>
      <option value="inputs">Inputs</option>
      <option value="switches">Switches</option>
      <option value="checkboxes">Checkboxes</option>
    </select>
    <label for="componentTitle">üìù Title (opt.)</label>
    <input type="text" id="componentTitle" placeholder="e.g. Fancy Glow Button" />
    <label for="componentTags">üè∑Ô∏è Tags (opt.)</label>
    <input type="text" id="componentTags" placeholder="hover, glassmorphism" />
    <button id="startBuildingButton">Start Building</button>
    <p id="altFlow">
      Not building a component? 
      <a href="create-other.html">Something else?</a>
    </p>
  </section>

  <section id="builderSection" style="display:none;">
    <div id="builderGrid">
      <div id="codeInputs">
        <h2>üß± Build Your Component</h2>

        <label for="htmlCode">HTML</label>
        <textarea id="htmlCode" rows="6"></textarea>

        <label for="cssCode" id="cssLabel">CSS</label>
        <div class="css-block-wrapper">
          <textarea id="cssCode" rows="6" placeholder="Write your CSS here..."></textarea>
          <div class="css-disabled-overlay hidden" id="cssOverlay">
            <div class="overlay-lock-icon">üîí</div>
          </div>
        </div>

        <div class="builder-buttons">
          <button id="previewButton">Preview</button>
          <button id="submitButton">Submit</button>
        </div>
      </div>

      <div id="livePreviewWrapper">
        <h2>üëÄ Live Preview</h2>
        <div id="previewCanvasContainer">

          <iframe id="livePreview" sandbox="allow-same-origin"></iframe>
          <button id="colorTrigger" title="Change canvas background"></button>
        </div>

        <div class="builder-preview-actions">
          <div class="action-buttons-row">
            <button id="loadDraftButton" class="action-btn">Load Last Draft</button>
            <button id="resetButton" class="action-btn secondary">Reset</button>
          </div>
          <div class="technology-switch-container">
            <span class="tech-switch-label">Technology:</span>
            <div class="techSwitch">
              <button class="techOption active" data-tech="css">CSS</button>
              <button class="techOption" data-tech="tailwind">Tailwind</button>
              <div class="techSlider"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <div id="toast" class="clover-toast hidden">‚úÖ Draft saved!</div>

  <div id="confirmModal" class="clover-modal hidden">
    <div class="modalContent">
      <p>‚ö†Ô∏è Are you sure you want to reset all code? This cannot be undone.</p>
      <div class="modalActions">
        <button id="cancelReset" class="cancel">Cancel</button>
        <button id="confirmReset" class="confirm">Reset</button>
      </div>
    </div>
  </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr"></script>
<script src="scripts/create.js"></script>

</body>
</html>



document.addEventListener('DOMContentLoaded', () => {
  const startBtn       = document.getElementById('startBuildingButton');
  const formSec        = document.getElementById('startFormSection');
  const buildSec       = document.getElementById('builderSection');
  const saveBtn        = document.getElementById('previewButton');
  const loadDraftBtn   = document.getElementById('loadDraftButton');
  const resetButton    = document.getElementById('resetButton');
  const confirmModal   = document.getElementById('confirmModal');
  const confirmReset   = document.getElementById('confirmReset');
  const cancelReset    = document.getElementById('cancelReset');
  const htmlInput      = document.getElementById('htmlCode');
  const cssInput       = document.getElementById('cssCode');
  const iframe         = document.getElementById('livePreview');
  const cssLabel       = document.getElementById('cssLabel');
  const toast          = document.getElementById('toast');
  const techButtons    = document.querySelectorAll('.techOption');
  const techSlider     = document.querySelector('.techSlider');
  const cssOverlay     = document.getElementById('cssOverlay');

  let usingTailwind = false;

  const savedDraft = JSON.parse(localStorage.getItem('cloverDraft') || 'null');
  if (savedDraft) {
    htmlInput.value = savedDraft.html;
    cssInput.value  = savedDraft.css;
    formSec.style.display  = 'none';
    buildSec.style.display = 'flex';
    renderPreview();
  }

  const savedTech = localStorage.getItem('cloverTech');
  if (savedTech === 'tailwind') {
    usingTailwind = true;
  }
  setActiveTech(usingTailwind ? 1 : 0);

  setInterval(() => {
    const draft = {
      html: htmlInput.value,
      css: cssInput.value,
      component: document.getElementById('componentType')?.value || 'unknown',
      timestamp: Date.now()
    };
    localStorage.setItem('cloverDraft', JSON.stringify(draft));
  }, 10000);

  startBtn.addEventListener('click', () => {
    const category = document.getElementById('componentType').value;
    if (!category) return showToast('‚ö†Ô∏è Please select a component type.');
    formSec.style.display  = 'none';
    buildSec.style.display = 'flex';
    renderPreview();
  });

  saveBtn.textContent = 'Save Draft';
  saveBtn.addEventListener('click', () => {
    const draft = {
      html: htmlInput.value,
      css: cssInput.value,
      component: document.getElementById('componentType')?.value || 'unknown',
      timestamp: Date.now()
    };
    localStorage.setItem('cloverDraft', JSON.stringify(draft));
    showToast('üíæ Draft saved!');
  });

  loadDraftBtn.addEventListener('click', () => {
    const saved = JSON.parse(localStorage.getItem('cloverDraft') || 'null');
    if (!saved) return showToast('‚ö†Ô∏è No saved draft found.');
    htmlInput.value = saved.html;
    cssInput.value  = saved.css;
    renderPreview();
    showToast('üì¶ Draft loaded!');
  });

  resetButton.addEventListener('click', () => {
    confirmModal.classList.remove('hidden');
  });
  cancelReset.addEventListener('click', () => {
    confirmModal.classList.add('hidden');
  });
  confirmReset.addEventListener('click', () => {
    htmlInput.value = '';
    cssInput.value  = '';
    localStorage.removeItem('cloverDraft');
    confirmModal.classList.add('hidden');
    renderPreview();
    showToast('üóëÔ∏è All code reset.');
  });

  ['input','change'].forEach(evt => {
    htmlInput.addEventListener(evt, renderPreview);
    cssInput.addEventListener(evt, renderPreview);
  });

  techButtons.forEach((btn, index) => {
    btn.addEventListener('click', () => setActiveTech(index));
  });

  cssInput.addEventListener('mousedown', (e) => {
    if (usingTailwind) {
      e.preventDefault();
      cssInput.classList.add('disabled-tooltip');
      setTimeout(() => cssInput.classList.remove('disabled-tooltip'), 3000);
    }
  });

  function setActiveTech(index) {
    usingTailwind = (index === 1);
    techButtons.forEach(b => b.classList.remove('active'));
    techButtons[index].classList.add('active');
    techSlider.style.left = index === 0 ? '4px' : '100px';

    cssLabel.textContent = usingTailwind ? 'Tailwind Utilities' : 'CSS';
    cssInput.disabled    = usingTailwind;
    cssOverlay.classList.toggle('hidden', !usingTailwind);

    localStorage.setItem('cloverTech', usingTailwind ? 'tailwind' : 'css');
    renderPreview();
  }

  function renderPreview() {
    const doc = iframe.contentDocument || iframe.contentWindow.document;
    const tailwindCDN = usingTailwind
      ? '<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">'
      : '';
    doc.open();
    doc.write(`
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8"/>
        <title>Preview</title>
        ${tailwindCDN}
        <style>
          body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
          }
          ${cssInput.value}
        </style>
      </head>
      <body>
        ${htmlInput.value}
      </body>
      </html>
    `);
    doc.close();
  }

  function showToast(message = '‚úÖ Saved!') {
    toast.textContent = message;
    toast.classList.add('show');
    setTimeout(() => toast.classList.remove('show'), 2500);
  }

  if (buildSec.style.display === 'flex') renderPreview();

  const pickr = Pickr.create({
    el: '#colorTrigger',
    theme: 'classic',
    default: '#ffffff',
    components: {
      preview: true,
      opacity: true,
      hue: true,
      interaction: {
        hex: true,
        rgba: true,
        input: true,
        save: true
      }
    }
  });

  pickr.on('change', (color) => {
    const hex = color.toHEXA().toString();
    const previewContainer = document.getElementById('previewCanvasContainer');
    if (previewContainer) {
      previewContainer.style.backgroundColor = hex;
    }
  });
});




body, .component-box, .component-box * {
  user-select: none;
  -webkit-user-select: none; 
  -moz-user-select: none; 
  -ms-user-select: none;    
}

body {
  margin: 0;
  background: #010201;
  font-family: 'Poppins', sans-serif;
  color: white;
}

#createContainer {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  padding: 2rem;
}

#startFormSection {
  background-color: #111;
  padding: 2rem;
  border-radius: 16px;
  width: 100%;
  max-width: 500px;
  box-shadow: 0 0 20px rgba(255, 255, 255, 0.05);
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
  border: 1px solid #2a2a2a;
}

#startFormSection h1 {
  font-size: 1.6rem;
  color: #f8e7f8;
  text-align: center;
}

label {
  font-size: 0.9rem;
  margin-bottom: 0.2rem;
  color: #ccc;
}

input,
select {
  padding: 0.75rem 1rem;
  background: #222;
  color: white;
  border: 1px solid #444;
  border-radius: 10px;
  font-size: 0.9rem;
}

input::placeholder {
  color: #777;
}

button#startBuildingButton {
  background: #837484;
  color: white;
  padding: 0.9rem 1.2rem;
  border: none;
  border-radius: 10px;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.2s ease;
}

button#startBuildingButton:hover {
  background: #b6a9b7;
}

#altFlow {
  text-align: center;
  font-size: 0.85rem;
  color: #aaa;
}

#altFlow a {
  color: #f8e7f8;
  text-decoration: underline;
  font-weight: 500;
}

#builderSection {
  flex-direction: column;
  padding: 2rem;
  width: 100%;
  gap: 2rem;
}

#builderGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
}

#codeInputs,
#livePreviewWrapper {
  background: #111;
  padding: 1.5rem;
  border-radius: 16px;
  border: 1px solid #2a2a2a;
}

#codeInputs h2,
#livePreviewWrapper h2 {
  color: #f8e7f8;
  margin-bottom: 1rem;
}

textarea {
  width: 100%;
  background: #222;
  color: white;
  border: 1px solid #444;
  border-radius: 10px;
  font-family: monospace;
  font-size: 0.9rem;
  padding: 0.75rem 1rem;
  margin-bottom: 1rem;
  resize: none;
}

.builder-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 1rem;
}

#previewButton,
#submitButton {
  background: #837484;
  color: white;
  padding: 0.8rem 1.2rem;
  border: none;
  border-radius: 10px;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
}

#previewButton:hover,
#submitButton:hover {
  background: #b6a9b7;
}

#livePreview {
  width: 100%;
  height: 400px;
  background: white;
  border: none;
  border-radius: 10px;
}

.builder-preview-actions {
  margin-top: 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  align-items: flex-start;
}

.builder-preview-actions .action-buttons-row {
  display: flex;
  gap: 0.5rem;
  width: 100%;
}

.builder-preview-actions .action-buttons-row .action-btn {
  flex: 1;
  padding: 0.5rem 1rem;
  font-size: 0.9rem;
  border-radius: 6px;
  border: none;
  cursor: pointer;
  transition: background 0.2s ease;
}

.builder-preview-actions .action-buttons-row .action-btn.secondary {
  background-color: #333;
  color: #fff;
}

.builder-preview-actions .action-buttons-row .action-btn:not(.secondary) {
  background-color: #5d3fd3;
  color: #fff;
}

.technology-switch-container {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 0.5rem;
  font-family: 'Poppins', sans-serif;
  color: var(--clover-glow);
}

.tech-switch-label {
  font-weight: 500;
}

.tech-switch-toggle {
  position: relative;
  display: inline-block;
  width: 50px;
  height: 26px;
}

.tech-switch-toggle input {
  opacity: 0;
  width: 0;
  height: 0;
}

.tech-switch-toggle .slider {
  position: absolute;
  cursor: pointer;
  top: 0; left: 0; right: 0; bottom: 0;
  background-color: #837484;
  transition: 0.4s;
  border-radius: 34px;
}

.tech-switch-toggle .slider::before {
  position: absolute;
  content: "";
  height: 20px; width: 20px;
  left: 3px; bottom: 3px;
  background-color: white;
  transition: 0.4s;
  border-radius: 50%;
}

.tech-switch-toggle input:checked + .slider {
  background-color: #b6a9b7;
}

.tech-switch-toggle input:checked + .slider::before {
  transform: translateX(24px);
}

.clover-toast {
  position: fixed;
  bottom: 20px;
  right: 20px;
  background: #111;
  color: #f8e7f8;
  padding: 10px 16px;
  border-radius: 8px;
  font-size: 0.9rem;
  box-shadow: 0 2px 10px rgba(0,0,0,0.5);
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease;
  z-index: 999;
}
.clover-toast.show {
  opacity: 1;
  pointer-events: auto;
}

.clover-modal {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}
.clover-modal.hidden {
  display: none;
}
.clover-modal .modalContent {
  background: #010201;
  color: #f8e7f8;
  padding: 24px;
  border-radius: 12px;
  max-width: 400px;
  text-align: center;
  box-shadow: 0 0 20px rgba(255, 255, 255, 0.1);
}
.modalActions {
  margin-top: 16px;
  display: flex;
  justify-content: center;
  gap: 16px;
}
.modalActions .cancel {
  background: transparent;
  border: 1px solid #b6a9b7;
  color: #b6a9b7;
  padding: 8px 16px;
  border-radius: 6px;
}
.modalActions .confirm {
  background: #f8e7f8;
  color: #010201;
  padding: 8px 16px;
  border-radius: 6px;
  font-weight: bold;
}

.techSwitchContainer {
  margin-top: 20px;
  display: flex;
  justify-content: center;
}

.techSwitch {
  position: relative;
  display: flex;
  background: #1a1a1a;
  border-radius: 999px;
  border: 1px solid #837484;
  padding: 4px;
  width: 200px;
  justify-content: space-between;
  align-items: center;
  font-family: 'Poppins', sans-serif;
}

.techOption {
  flex: 1;
  padding: 8px 0;
  text-align: center;
  background: transparent;
  border: none;
  color: #b6a9b7;
  font-size: 14px;
  cursor: pointer;
  position: relative;
  z-index: 2;
  transition: color 0.2s ease;
  border-radius: 999px;
}

.techOption.active {
  color: #010201;
  font-weight: 600;
}

.techSlider {
  position: absolute;
  top: 4px;
  left: 4px;
  width: 96px;
  height: calc(100% - 8px);
  background: #f8e7f8;
  border-radius: 999px;
  z-index: 1;
  transition: all 0.3s ease;
  box-shadow: 0 0 10px rgba(248, 231, 248, 0.4);
}

textarea:disabled {
  background: linear-gradient(135deg, #f3f3f3, #e0dfe2);
  color: #999;
  cursor: not-allowed;
  opacity: 0.8;
  border: 1px dashed #bbb;
  box-shadow: inset 0 0 4px rgba(0, 0, 0, 0.05);
  backdrop-filter: blur(2px);
  transition: all 0.2s ease-in-out;
}

.css-block-wrapper {
  position: relative;
}

.css-disabled-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(240, 240, 240, 0.6);
  backdrop-filter: blur(2px);
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  pointer-events: none;
  transition: opacity 0.2s ease-in-out;
}

.css-disabled-overlay.hidden {
  display: none;
}

.overlay-lock-icon {
  font-size: 1.8rem;
  color: #888;
  opacity: 0.8;
}

textarea.disabled-tooltip:hover::after {
  opacity: 1;
}

textarea.disabled-tooltip::after {
  content: "üîí You're using Tailwind. Switch back to enable this field.";
  position: absolute;
  top: 100%;
  left: 0;
  background-color: #333;
  color: white;
  padding: 6px 10px;
  font-size: 0.85rem;
  border-radius: 4px;
  margin-top: 4px;
  opacity: 0;
  pointer-events: none;
  white-space: nowrap;
  z-index: 10;
  transition: opacity 0.2s ease-in-out;
}

#previewCanvasContainer {
  position: relative;
  width: 100%;
  height: 320px;
  background-color: #ffffff;
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid #ddd;
  box-shadow: 0 0 6px rgba(0,0,0,0.08);
}

#previewCanvasContainer iframe {
  width: 100%;
  height: 100%;
  border: none;
  border-radius: 12px;
}

#colorTrigger {
  position: absolute;
  bottom: 10px;
  right: 10px;
  width: 28px;
  height: 28px;
  background: linear-gradient(45deg, red, orange, yellow, green, blue, indigo, violet);
  border-radius: 4px;
  box-shadow: 0 1px 4px rgba(0,0,0,0.25);
  cursor: pointer;
  border: 1px solid #fff;
  z-index: 100;
}

/* Pickr container fix */
.pickr {
  position: absolute;
  bottom: 50px;
  right: 10px;
  z-index: 9999;
}
